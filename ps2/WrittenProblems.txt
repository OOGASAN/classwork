Sam Tymorek
samtymorek@hotmail.com
Problem Set 2

1)

a) 3 4 18 24 33 40 8 10 12
b) 4 10 18 24 33 40 8 3 12
c) 8 3 4 10 18 12 24 33 40
d) 4 10 18 8 3 12 24 33 40
e) 10 18 4 24 12 3 8 40 33
f) 10 20 12 33 3 4 24 18 8
g) 4 10 18 24 33 8 40 3 12


==============================================================================

2)

a) 
4 comparisons 
Insertion sort starts with the second element,and compares it to the element on its left. 
Because our array is already sorted, the algorithm will move on to the third element and compare it to the element 
on it's left, and so on until we reach the end.  

b) 
10 comparisons
Bubble sort makes N-1 comparisons on the first pass, N-2 comparisons on the second pass,
etc. so there will be a total of 5*(5-1)/2 comparisons or 10.

c) 
In Theory: 
12 comparisons
Quicksort makes N comparisons for each "row" on its tree of partitions, until each sub-array has only one element.
This gives us O (n log^2 n) comparisons, or 12 in this case.
In Practice:
16 comparisons

==============================================================================

3)

Algorithm A - O(n^2)
Algorithm A makes n-1 comparisons the first time through the outer for loop, then  makes
n-2 comparisons the second pass, n-3 the third time, etc.  This equals n*(n-1)/2 or 0(n^2).

Algorithm B - O(n log n)
Algorithm B can be said to run in O(n log n) time.  After the call to mergesort(), the algorithm
runs in linear time or O(n) because it will always make n-1 comparisons - comparing every element after the
first element to the element before it.  However, the mergesort algorithm adds an overhead of O(n log n).

==============================================================================
4)
a) (n - (n - 1)) + (n - (n - 2)) + (n - (n - 3)) â€¦ (n - (n - n)) = n * (n + 1) \ 2
for example : for n = 5:
	1 + 2 + 3 + 4 + 5 = 15 = 5 * (5 + 1) \ 2
	
b) 0(n^2)
We ignore the constants 1 and 2 in the above equation and just take n^2, just as we do when 
expressing n * (n - 1) \ 2 formulas in big-O notation.

c)
public static void generateSums(int n) {
	int sum = 0;
	int i = 1;
	while (i <= n) {
		sum = sum + i;
		i++;
		System.out.println(sum);		
	}
}

d)
O(n)
This algorithm runs through the loop and does the main work of the function n times, no matter how large n is.


==============================================================================
5)

==============================================================================
6)
a)
Expression                  Address     Value
n                           0x128       0x832            
n.ch                        0x832       'e'
n.prev                      0x838       0x180
n.prev.next                 0x182       0x832
n.next.prev                 0x262       0x832
n.next.prev.prev            0x838       0x180

b)
// assign 'a' node's next to 't'
m.next = n.next;
// assign 'a' node's prev to 'e'
m.prev = n;
// assign 'e' node's next to 'a'
n.next = m;
// assign 't' node's prev to 'a'
m.next.prev = m;

==============================================================================
Programmin Problems 3b:
Results of running the shellBubbleSort algorithm with sorted and unsorted arrays of various sizes:
fully sorted:   comparisons     moves
n = 1000        5457            0           
n = 2000        12364           0 
n = 4000        27084           0
n = 8000        59084           0
n = 16000       129243          0           

random:
n = 1000        52265           26459       
n = 2000        131754          63472
n = 4000        351910          159730 
n = 8000        876599          373695
n = 16000       2123513         877566      

Results for fully sorted are not averages because it became quickly apparant that the number of comparisons for a given  value n is always the same and the number of moves is always 0.  Results for the fully random array are averages.  

Based on the results from the fully sorted array, the algorithm has a best case speed of 0(n log n).  The number of comparisons is  slightly smaller than would be expected for an n log n algorithm (9966 for n = 1000).

For a random array, the speed is closer to quadratic, but not quite that slow.  It clocks in between the Shell and Insertion sorts, Shell being O(n^1.5).





