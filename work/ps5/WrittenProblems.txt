Sam Tymorek
samtymorek@hotmail.com
Problem Set 5 Written Problems

1)
a)
sift down starting with the parent of the rightmost node in the lowest occupied level of the tree,
as in Heap.makeHeap()

sift down 20:

                          12
                         /  \ 
                        /    \
                       /      \ 
                      21      26       
                     /  \    /  \
                    33  35  40  15   
                   /
                  20  



then 26:                  
                          12
                         /  \ 
                        /    \
                       /      \ 
                      21      40       
                     /  \    /  \
                    33  35  26  15   
                   /
                  20  
                  
                  
then 21:                  
                          12
                         /  \ 
                        /    \
                       /      \ 
                      35      40       
                     /  \    /  \
                    33  21  26  15   
                   /
                  20                                      
                  
then 12:                  
                          40
                         /  \ 
                        /    \
                       /      \ 
                      35      12       
                     /  \    /  \
                    33  21  26  15   
                   /
                  20                  
                  
                          40
                         /  \ 
                        /    \
                       /      \ 
                      35      26       
                     /  \    /  \
                    33  21  12  15   
                   /
                  20 
                  
                  
b)  
  | 40 | 35 | 26 | 33 | 21 | 12 | 15 | 20 |
  
  
c)

  | 35 | 33 | 26 | 20 | 21 | 12 | 15 | 40 |
  
  | 33 | 21 | 26 | 20 | 15 | 12 | 35 | 40 |
  
  | 26 | 21 | 12 | 20 | 15 | 33 | 35 | 40 |
  
  | 21 | 20 | 12 | 15 | 26 | 33 | 35 | 40 |
  
  | 20 | 15 | 12 | 21 | 26 | 33 | 35 | 40 |
  
  | 15 | 12 | 20 | 21 | 26 | 33 | 35 | 40 |
  
  | 12 | 15 | 20 | 21 | 26 | 33 | 35 | 40 |
  
  
  
==================================================================  
2)
a)

1st state to compare is original state:

475
3_1
628
  
priority = -12  
  
2nd state:
475
31_
628  

priority = -11

3rd state:
47_
315
628  
  
priority = -10  




b)
1st state to compare is original state:

475
3_1
628
  
priority = -12   
  
2nd state:  
475
31_
628  

priority = -12


3rd state:
4_5
371
628
  
priority = -12  
  
==================================================================  
  
3)
a)

// psuedocode for a binary search tree based priority queue
// uses key as priorities
class TreeBasedPQueue:
	Tree t
	
	public insert():
		t.insert()
		
	public remove():
		// call new method that returns the node in the tree whose key has the greatest value
		Node temp =  t.maxNode()	
		t.delete(temp.key)
		return temp
		
		
// method to add to class LinkedTree that returns the node in the tree whose key is of
// the largest value
class LinkedTree
	â€¦
	public Node maxNode():
		return maxNodeTree(root);
		
	private Node maxNodeTree(Node root):
		Node current, last
		current = root
		while (current != null): 
			last = current;
			current = current.right	
				
		return last
		
		
The worst case efficiency of this implementation is O(n) because if the items are inserted
in order, the resulting tree will have a depth of n.

b)
If we have a reference to the node with the highest priority, we can set a reference to that node's parent, then delete
it, then make the parent node the new node with highest priority.  This can be done in O(1) time.		 	


==================================================================  

4)

a)
"by"

0 |
1 |
2 | "my"
3 | "the"
4 |
5 |
6 | "an"
7 |


b)
"if"

0 | 
1 |
2 | "my"
3 | "the"
4 | "do"
5 | "an"
6 | "by"
7 | "we"


==================================================================  

5)
a)
Atlanta, St. Louis, Washington, Denver, New York, Boston, LA, Seattle

b)
Atlanta -> St. Lous -> Boston

c)
Atlanta, St. Louis, Washington, New York, Boston, Denver, LA, Seattle

d)
Atlanta -> St. Louis -> Washington -> New York -> Boston

==================================================================  

6)
(Atlanta, St. Louis)
(Atlanta, Washington)
(Washington, New York)
(New York, Boston)
(St. Louis, Denver)
(Denver, LA)
(LA, Seattle)

==================================================================  

7)
a)
[x] = finalized

Atlanta		[0]				
Boston		inf.	inf.	1500	1500	[1100]
Devner		inf.	inf.	1290	1290	1290	[1290]
LA			inf.	inf.	inf.	inf.	inf.			1590	[1590]
New York	inf.	inf.	1400	[900]	
St. Louis	inf.	[500]			
Seattle		inf.	inf.	inf.	inf.	inf.			[1390]	
Washington 	inf.	650	  	[650] 


b)
Atlanta -> St. Louis -> Boston
Atlanta ->Washington -> New York -> Boston

==================================================================  

8)
a)
// method to check whether vertex a and vertex b are adjacent
private static boolean isAdjacent(Vertex a, Vertex b){
    boolean isadjacent = false;
    
    Edge e = a.edges;
    
    // step through the linked list representing edges that connect to vertex a
    // and return true if one of these edges connects to vertex b
    while (e != null){
        if (e.end.id == b.id) {
            isadjacent = true;
            break;
        }
        e = e.next;
    }
    
    return isadjacent;
}

b)
The worst case scenario for a graph with n vertices implemented using our Graph class
would be if all n vertices were connected to vertex a from the method above, and the edge 
referencing the connection from vertex a to vertex b was the last element of a's edges 
linked list.  This would run in O(n), or linear time, because a's linked list of edges would
grow linearly in relation to n.


c)
If our Graph class used an adjacency matrix instead of a linked list of linked lists, we could determine
if two vertices are adjacent simply by evaluating edge[a][b] and if edge[a][b] returns a valid cost,
the two vertices are adjacent.  This could be done in O(1), or constant, time.


==================================================================  

9)
a)
{(b,c), (c,d), (d,b)}, {(c,d),(d,f),(f,c)}

b)
reverse (c,d) to (d,c)

c)
d,f,b,c,a,e

d,b,f,c,a,e



==================================================================  

10)
a) adjacency matrix - Because there are four edges for every vertex, this is a dense graph.  The cost of building
the matrix will be less then the cost of maintaining links in an adjacency list.

b)adjacency list - Because this is a less dense graph, it is better to use a list, and avoid the extra space 
that an adjacency matrix requires

c) adjacency matrix - Lookup time for adjacent vertexes is much faster with an adjacency matrix: O(1) 
as opposed to O(n) as shown in question 8.  Especially if space is not important, an adjacency matrix is the
way to go.  


==================================================================  

11)
For this application it is better to use a balanced search tree. 
To simply retreive a product by name, a hash table would be better because it would run in O(1) time, whereas a 
balanced search tree will run in O(log n).  However, for the operation of specifying the first n characters of a
product name and retreiving all records that begin with those characters, a balanced search tree would be better.  
This operation is basically a range search, which is easier to do with a balanced search tree.  Also, the specifiec 
time requirements for retrieval of 20 operation per one million records are within the capabilities of a balanced 
search tree, which searches in O(log n) time.  Another reason for choosing the balanced search tree is the requirement
to add large sets of new records.  This will be faster with a balanced search tree which can add records in O(log n)
time, while a hash table can be slowed to O(m) or O(n) time for insertion in worst case scenarios.



12)
(1, 8)
(8, 2)
(8, 5)
(5, 3)
(5, 4)
(2, 6)
(6, 7)

To find the bridges to build with minimal construction cost, I used Prim's algorithm.  Because we are concerned with
keeping the total cost of the edges to a minimum, this is the appropriate algorithm.
The unconnected islands must be represented as vertices in a complete graph, with the costs of edges being the distance between each island.  Then Prim's can be used to determine the minimum spanning tree, which will give the cheapest way to build the bridges.



13)
(Boston, New York)
(New York, Washington)
(Atlanta, St. Louis)
(Atlanta, Washingont)
(St. Louis, Denver)
(Denver, LA)
(LA, Seattle)














  
  
  
  
                              
